import json

import pytest
from omegaconf import OmegaConf
from webdriver import ManagerWebdriver

from sofascrape.football import EventFootallComponentScraper

pl_24_25_ids = [
    11352303,
    11352251,
    11352250,
    11352253,
    11352252,
    11352254,
    11352255,
    11352309,
    11352316,
    11352327,
    11352399,
    11352367,
    11352428,
    11352358,
    11352407,
    11352389,
    11352337,
    11352418,
    11352346,
    11352484,
    11352437,
    11352504,
    11352447,
    11352495,
    11352456,
    11352466,
    11352524,
    11352475,
    11352515,
    11352590,
    11352597,
    11352594,
    11352570,
    11352561,
    11352543,
    11352551,
    11352584,
    11352578,
    11352534,
    11352626,
    11352625,
    11352611,
    11352621,
    11352602,
    11352608,
    11352615,
    11352600,
    11352605,
    11352618,
    11352635,
    11352632,
    11352634,
    11352628,
    11352630,
    11352633,
    11352627,
    11352631,
    11352629,
    11352636,
    11352638,
    11352646,
    11352641,
    11352637,
    11352642,
    11352645,
    11352639,
    11352644,
    11352643,
    11352640,
    11626262,
    11352653,
    11352654,
    11352649,
    11352651,
    11352652,
    11352650,
    11352648,
    11352655,
    11352656,
    11352647,
    11352662,
    11352663,
    11352664,
    11352660,
    11352657,
    11352665,
    11352661,
    11352666,
    11352658,
    11352667,
    11352673,
    11352672,
    11352669,
    11352668,
    11352677,
    11352676,
    11352674,
    11352671,
    11352670,
    11352675,
    11352307,
    11352312,
    11352306,
    11352304,
    11352320,
    11352305,
    11352314,
    11352317,
    11352310,
    11352323,
    11352349,
    11352341,
    11352353,
    11352335,
    11352350,
    11352339,
    11352326,
    11352345,
    11352329,
    11352332,
    11352373,
    11352375,
    11352360,
    11352379,
    11352370,
    11352382,
    11352356,
    11352385,
    11352363,
    11352366,
    11352391,
    11352393,
    11352396,
    11352411,
    11352408,
    11352404,
    11352400,
    11352414,
    11352388,
    11352405,
    11352440,
    11352430,
    11352433,
    11352421,
    11352426,
    11352442,
    11352445,
    11352417,
    11352424,
    11777279,
    11352455,
    11352468,
    11352452,
    11352477,
    11352471,
    11352449,
    11352464,
    11352459,
    11352461,
    11352473,
    11352505,
    11352498,
    11352492,
    11352501,
    11352489,
    11352483,
    11352487,
    11352508,
    11352496,
    11352514,
    11352511,
    11352535,
    11352531,
    11352522,
    11352517,
    11352528,
    11352520,
    11352538,
    11352566,
    11352541,
    11352569,
    11352554,
    11352563,
    11352557,
    11352547,
    11352559,
    11777280,
    11777281,
    11352582,
    11352583,
    11352573,
    11352592,
    11352576,
    11352586,
    11352577,
    11352587,
    11352580,
    11352589,
    11352318,
    11352321,
    11352331,
    11352324,
    11352328,
    11352311,
    11352313,
    11352334,
    11352308,
    11352315,
    11352348,
    11352344,
    11352342,
    11352361,
    11352338,
    11352369,
    11352351,
    11352365,
    11352354,
    11896302,
    11352395,
    11352402,
    11352383,
    11352386,
    11352409,
    11352398,
    11352392,
    11352372,
    11352376,
    11352380,
    11352431,
    11352423,
    11352439,
    11352446,
    11352419,
    11352427,
    11352435,
    11352443,
    11352412,
    11352415,
    11352450,
    11352453,
    11352486,
    11352474,
    11352462,
    11352478,
    11352469,
    11352481,
    11352465,
    11352458,
    11971437,
    11352512,
    11352518,
    11352499,
    11352502,
    11352509,
    11352490,
    11352493,
    11352525,
    11352521,
    11352556,
    11352530,
    11352564,
    11352553,
    11352537,
    11352540,
    11352545,
    11352533,
    11352548,
    11352560,
    11352591,
    11352595,
    11352585,
    11352567,
    11352572,
    11352575,
    11352593,
    11352579,
    11352588,
    11352581,
    11977248,
    11352599,
    11352606,
    11352604,
    11352609,
    11352620,
    11352616,
    11352624,
    11352612,
    11352623,
    11352622,
    11352613,
    11352614,
    11352617,
    11352619,
    11352343,
    11352333,
    11352330,
    11352319,
    11352336,
    11352322,
    11352325,
    11352352,
    11352347,
    11352340,
    11352362,
    11352368,
    11352355,
    11352384,
    11352364,
    11352371,
    11352359,
    11352374,
    11352378,
    11352381,
    11352410,
    11352406,
    11352397,
    11352413,
    11352394,
    11352387,
    11352403,
    11352416,
    11352390,
    11352401,
    11352434,
    11352441,
    11352448,
    11352429,
    11352420,
    11352425,
    11352432,
    12190322,
    12190332,
    12190339,
    12190336,
    12190340,
    12190341,
    11352476,
    11352463,
    11352467,
    11352460,
    11352479,
    11352457,
    11352454,
    11352472,
    11352451,
    11352470,
    12226774,
    11352503,
    11352482,
    11352491,
    11352485,
    11352510,
    11352507,
    11352494,
    11352488,
    11352500,
    12226495,
    11352529,
    11352542,
    11352536,
    11352513,
    11352516,
    11352527,
    11352519,
    11352539,
    11352532,
    11352523,
    12240634,
    12240570,
    12240571,
    11352571,
    11352552,
    11352565,
    11352546,
    11352558,
    11352574,
    11352549,
    11352562,
    11352568,
    11352555,
]


@pytest.fixture
def get_driver():
    mw = ManagerWebdriver()
    return mw.spawn_webdriver()


@pytest.fixture
def match_details_scraper(get_driver):
    return EventFootallComponentScraper(webdriver=get_driver, matchid=11352253)


def test_basic_setup(get_driver):
    eventDetailsScraper = EventFootallComponentScraper(
        webdriver=get_driver, matchid=12436870
    )
    print(OmegaConf.to_yaml(eventDetailsScraper.cfg))


def test_getpage(match_details_scraper):
    match_details_scraper.get_data()
    assert match_details_scraper.raw_data is not None, "Expected raw data got none."
    assert isinstance(
        match_details_scraper.raw_data, dict
    ), f"Expect dict data, got {type(match_details_scraper.raw_data)=}."

    print(json.dumps(match_details_scraper.raw_data, indent=4))


def test_process(match_details_scraper):
    result = match_details_scraper.process()

    assert result is not None, "Error getting the data"

    if result:
        print(result.model_dump_json(indent=6))


@pytest.mark.parametrize("matchid", pl_24_25_ids)  # might take awhile
def test_process_sweep(matchid):
    mw = ManagerWebdriver()
    d1 = mw.spawn_webdriver()
    event_details_scraper = EventFootallComponentScraper(webdriver=d1, matchid=matchid)
    result = event_details_scraper.process()
    if result:
        print(result.event.slug)
    d1.close()
